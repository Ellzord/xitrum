1.9.2 (planned):
* Update Hazelcast from 2.1.2 to 2.2
  http://hazelcast.com/docs/2.2/manual/multi_html/ch18s04.html
* Support "Range" request to dynamic content, not only to static files
* Remove HttpChunkAggregator to support big file upload
* Improve I18n#tf, tcf, tnf, tcnf to support changing order of placeholders
* An action can have multiple Scalate view files more easily
* I18n for validation messages
* Make extensive use of Knockout.js and Scala delimited continuation
* Integrate WebSocket to Comet; use WebSocket if available, or fall back to Ajax
* Add Ajax style upload based on iframe
* Add digest authentication
* Add Akka
* Typesafe routes using Scala compiler plugin
* wro4j
* Middleware architecture based on Netty handlers
* Reload routes when in development mode with JRebel

1.9.1:
* Support "Range" request to static files
  Xitrum can now be used to serve movies for iOS
* Update Netty from 3.5.0.Final to 3.5.3.Final:
  https://netty.io/Blog/Announcing+the+new+web+site+and+Netty+351Final
  https://netty.io/Blog/Netty+352Final+is+out
  https://netty.io/Blog/Say+Hello+to+Netty+353Final+
* Update Rhino from 1.7R3 to 1.7R4:
  https://developer.mozilla.org/en/New_in_Rhino_1.7R4
* Update SBT from 0.11.2 to 0.11.3-2

1.9:
* Use Netty 3.5.0.Final instead of 4.0.0.Alpha1-SNAPSHOT for file upload
  To upgrade, in your project in most cases just replace
  io.netty.xxx with org.jboss.netty.xxx
  Ex:
    Old code: import io.netty.util.CharsetUtil.UTF_8
    New code: import org.jboss.netty.util.CharsetUtil.UTF_8
* basicAuthenticate now works as documented:
  http://ngocdaothanh.github.com/xitrum/guide/howto.html#basic-authentication
* Add I18n#tf, tcf, tnf, tcnf for formatted string;
  Standard placeholders %d, %s etc. work, but if the formatted string contains
  many of them, their order should not be changed
* sbt publish-local can be run easily by anyone, not only core developers
* Update Hazelcast from 2.0.2 to 2.1.2
* Update SLF4J from 1.6.4 to 1.6.6

1.8.7:
* Add build for Scala 2.9.2
* To get URL to WebSocket action:
  ControllerObject.action.webSocketAbsoluteUrl
* Update Hazelcast from 2.0.1 to 2.0.2
* Fix #63
  https://github.com/ngocdaothanh/xitrum/issues/63

1.8.6:
* Fix WebSocket bug introduced in Xitrum 1.8.4, now WebSocket frame receiving works again
* Cleaner API for WebSocket:
  http://ngocdaothanh.github.com/xitrum/doc/async.html#websocket
* To easily put JS fragments to Scalate views, jsAtBottom is split to jsDefaults and jsForView.
  jsDefaults containing jQuery, Knockout.js etc. should be put at layout's <head>.
  jsForView containing JS fragments added by jsAddToView should be put at layout's bottom.
* Add JS utility: xitrum.appendAndScroll, see example:
  https://github.com/ngocdaothanh/xitrum-demos/blob/master/src/main/view/scalate/quickstart/controller/CometChat/index.jade

1.8.5:
* Regex can be used in routes to specify requirements:
  def show = GET("/articles/:id<[0-9]+>") { ... }
* Update Hazelcast from 2.0 to 2.0.1
* Update Javassist from 3.15.0-GA to 3.16.1-GA

1.8.4:
* Update Hazelcast from 1.9.4.8 to 2.0
* Remove ExecutionHandler.
  If your action performs a blocking operation that
  takes long time or accesses a resource which is not CPU-bound business logic
  such as DB access, you should do it in the async style (better) or use a separate
  thread pool to avoid unwanted hiccup during I/O because an I/O thread cannot
  perform I/O until your action returns the control to the I/O thread.
* For each connection, requests will be processed one by one.
  From Mongrel2: http://mongrel2.org/static/book-finalch6.html
  Where problems come in is with pipe-lined requests, meaning a browser sends a
  bunch of requests in a big blast, then hangs out for all the responses. This
  was such a horrible stupid idea that pretty much everone gets it wrong and
  doesn’t support it fully, if at all. The reason is it’s much too easy to blast
  a server with a ton of request, wait a bit so they hit proxied backends, and
  then close the socket. The web server and the backends are now screwed having
  to handle these requests which will go nowhere.

1.8.3:
* Fix https://github.com/ngocdaothanh/xitrum/issues/60

1.8.2:
* Filters now have "only" and "except"
  http://ngocdaothanh.github.com/xitrum/filter.html
* Optimize routing by using methods instead of vals
  http://ngocdaothanh.github.com/xitrum/controller_action_view.html

1.8:
* Add Scalate back, with precompilation
* Remove annotations and put related actions into controller
* Remove server-side auto-validation for postback requests and
  rewrite validators so that they can be used for any kind of requests;
  You can still use postback APIs on browser side, postback requests are easier
  to debug with Firebug or Chrome, because parameter names are no longer encrypted
* Improve data-after, now you can write
    data-after="$('#chatInput').val('')"
  instead of
    data-after="function () { $('#chatInput').val('') }"
* Add Knockout.js
* Add Scala delimited continuation
  See:
    http://www.earldouglas.com/continuation-based-web-workflows-part-two/
    http://stackoverflow.com/questions/6062003/event-listeners-with-scala-continuations
    http://jim-mcbeath.blogspot.com/2010/08/delimited-continuations.html
* Update jQuery from 1.6.4 to 1.7.1
* Fix urlForPublic bug, resulted URL now has the leading "/"
* Improve Quickstart: https://github.com/ngocdaothanh/xitrum-quickstart

1.7:
* WebSocket, see:
  http://ngocdaothanh.github.com/xitrum/async.html#websocket
  http://netty.io/blog/2011/11/17/
* Make postback tag attributes HTML5 standards-compliant:
  You must change:
    postback to data-postback
    after    to data-after
    confirum to data-confirm
* Expose APIs for data encryption so that application developers may use
  xitrum.util.{Secure, SecureBase64, SeriDeseri}
  See http://ngocdaothanh.github.com/xitrum/howto.html#encrypt-data
* Update Hazelcast from 1.9.4.4 to 1.9.4.5

1.6:
* Redesign filters to be typesafe
* Add after and around filters
* Add Loader.json and use JSON for config files
  (.json files should be used instead of .properties files)

1.5.3:
* Close connection for HTTP 1.0 clients. This allows Xitrum to be run behind
  Nginx without having to set proxy_buffering to off.
  Nginx talks HTTP/1.1 to the browser and HTTP/1.0 to the backend server, and
  it needs the backend server to close connection after finishing sending
  response to it. See http://wiki.nginx.org/HttpProxyModule.
* Fix the bug that causes connection to be closed immediately when sending file
  from action using renderFile to HTTP 1.0 clients.

1.5.2:
* Add xitrum.Config.root (like Rails.root) and fix #47
* Better API for basic authentication
* renderFile now can work with absolute path on Windows
* Exit if there's error on startup
* Update SLF4J from 1.6.2 to 1.6.4 (and Logback from 0.9.30 from to 1.0.0)
* Update Hazelcast from 1.9.4.3 to 1.9.4.4

1.5.1:
* Update Jerkson from 0.4.2 to 0.5.0

1.5:
* Static public files now do not have to have /public prefix, this is convenient
  but dynamic content perfomance decreases a little
* Applications can handle 404 and 500 errors by their own instead of using
  the default 404.html and 500.html
* Change validation syntax to allow validators to change HTML element:
  <input type="text" name={validate("username", Required)} /> now becomes
  {<input type="text" name="username" /> :: Required}

  <input type="text" name={validate("param", MaxLength(32), MyValidator)} /> now becomes
  {<input type="text" name="param" /> :: MaxLength(32) :: MyValidator}

  <input type="text" name={validate("no_need_to_validate")} /> now becomes
  {<input type="text" name="no_need_to_validate" /> :: Validated}
* Implement more validators: Email, EqualTo, Min, Max, Range, RangeLength
* Update jQuery Validation from 1.8.1 to 1.9.0:
  https://github.com/jzaefferer/jquery-validation/blob/master/changelog.txt
* Textual responses now include charset in Content-Type header:
  http://code.google.com/speed/page-speed/docs/rendering.html#SpecifyCharsetEarly
* Fix bug header not found: Content-Length for 404 and 500 content

1.4:
* Fix bug at setting Expires header for static content, it is now one year
  later instead of 17 days later
* Set Expires header for resources in classpath
* HTTPS (see config/xitrum.properties)
  KeyStore Explorer is a good tool to create self-signed keystore:
  http://www.lazgosoftware.com/kse/index.html

1.3:
* Update
    Hazelcast: 1.9.4.2 -> 1.9.4.3
    Jerkson:   0.4.1   -> 0.4.2
    SBT:       0.10.1  -> 0.11.0
* Improve performance, based on Google's best practices:
  http://code.google.com/speed/page-speed/docs/rules_intro.html
  Simple benchmark (please use httperf, ab is broken) on
  MacBook Pro 2 GHz Core i7, 8 GB memory:
    Static file:                 ~11000 req/s
    Resource file in classpath:  ~11000 req/s
    Dynamic HTML without layout: ~7000  req/s
    Dynamic HTML with layout:    ~7000  req/s
* Only gzip when client specifies "gzip" in Accept-Encoding request header

1.2:
* Conditional GET using ETag, see:
  http://stevesouders.com/hpws/rules.php
* Fix for radio: SecureBase64.encrypt always returns same output for same input
  <input type="radio" name={validate("light")} value="red" />
  <input type="radio" name={validate("light")} value="yellow" />
  <input type="radio" name={validate("light")} value="green" />

1.1:
* i18n using Scaposer
* Faster route collecting on startup using Sclasner
